{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","className","map","good","id","name","color","style","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","status","statusText","SortType","buttonNames","NONE","ALL","FIRST5","RED","App","useState","setGoods","sortType","setSortType","errorText","setErrorText","getGoods","promise","a","goodsFromServer","String","handleButtonClick","newSortType","sort","g1","g2","localeCompare","slice","filter","Object","values","Boolean","currentSortType","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"4PAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,oBAAIC,UAAU,UAAd,SACGD,EAAME,KAAI,SAAAC,GACT,IACEC,EAGED,EAHFC,GACAC,EAEEF,EAFFE,KACAC,EACEH,EADFG,MAGF,OACE,oBACEL,UAAU,YAEV,UAAQ,OACRM,MAAO,CAAED,SAJX,SAMGD,GAJID,SCdR,SAASI,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,GAMV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAM7CJ,EAASK,OALPC,QAAQC,OACb,IAAIC,MAAM,kCAPLF,QAAQC,OACb,IAAIC,MAAJ,UAAaR,EAASS,OAAtB,cAAkCT,EAASU,iBAc9C,I,ECjBFC,G,SAAAA,K,QAAAA,E,iBAAAA,E,2BAAAA,E,kBAAAA,M,KAWL,IAAMC,GAAwB,mBAC3BD,EAASE,KAAO,IADW,cAE3BF,EAASG,IAAM,kBAFY,cAG3BH,EAASI,OAAS,sBAHS,cAI3BJ,EAASK,IAAM,kBAJY,GAOjBC,EAAU,WACrB,MAA0BC,mBAAiB,IAA3C,mBAAO7B,EAAP,KAAc8B,EAAd,KACA,EAAgCD,mBAAmBP,EAASE,MAA5D,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,mBAAS,IAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEiBD,EAFjB,OAEPE,EAFO,OAIbR,EAASQ,GAJI,gDAMbJ,EAAaK,OAAO,EAAD,KANN,yDAAH,sDAURC,EAAoB,SAACC,GACzB,GAAIV,IAAaU,EAMjB,OAFAT,EAAYS,GAEJA,GACN,KAAKnB,EAASG,IACZU,EAAS3B,KACT,MAEF,KAAKc,EAASI,OACZS,ED5BC3B,IACJE,MAAK,SAAAV,GAAK,OAAIA,EACZ0C,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGtC,KAAKwC,cAAcD,EAAGvC,SAC1CyC,MAAM,EAAG,OC0BR,MAEF,KAAKxB,EAASK,IACZQ,EDzBC3B,IACJE,MAAK,SAAAV,GAAK,OACTA,EAAM+C,QAAO,SAAA5C,GAAI,MAAmB,QAAfA,EAAKG,eC+B9B,OACE,sBAAKL,UAAU,UAAf,UACE,oBAAIA,UAAU,mBAAd,mCAEA,qBAAKA,UAAU,mBAAf,SACG+C,OAAOC,OAAO3B,GAAUyB,OAAOG,SAAShD,KAAI,SAACiD,GAAD,OAC3C,wBACElD,UAAU,kCACVmD,KAAK,SACL,UAASD,EACTE,QAAS,WACPb,EAAkBW,IALtB,SAQG5B,EAAY4B,UAKlBlB,EACG,6CAAcA,KACd,cAAC,EAAD,CAAWjC,MAAOA,Q,MClF5BsD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.625fe8f3.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"content\">\n    {goods.map(good => {\n      const {\n        id,\n        name,\n        color,\n      } = good;\n\n      return (\n        <li\n          className=\"is-size-5\"\n          key={id}\n          data-cy=\"good\"\n          style={{ color }}\n        >\n          {name}\n        </li>\n      );\n    })}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(\n          new Error('Content type is not supported'),\n        );\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((g1, g2) => g1.name.localeCompare(g2.name))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => (\n      goods.filter(good => good.color === 'red')\n    ));\n};\n","import { FC, useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { Good } from './types/Good';\n\nimport { get5First, getAll, getRedGoods } from './api/goods';\n\nenum SortType {\n  NONE = '',\n  ALL = 'all-button',\n  FIRST5 = 'first-five-button',\n  RED = 'red-button',\n}\n\ntype ButtonNames = {\n  [key in SortType]: string;\n};\n\nconst buttonNames: ButtonNames = {\n  [SortType.NONE]: '',\n  [SortType.ALL]: 'Load all goods',\n  [SortType.FIRST5]: 'Load 5 first goods',\n  [SortType.RED]: 'Load red goods',\n};\n\nexport const App: FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [errorText, setErrorText] = useState('');\n\n  const getGoods = async (promise: Promise<Good[]>): Promise<void> => {\n    try {\n      const goodsFromServer = await promise;\n\n      setGoods(goodsFromServer);\n    } catch (error) {\n      setErrorText(String(error));\n    }\n  };\n\n  const handleButtonClick = (newSortType: SortType) => {\n    if (sortType === newSortType) {\n      return;\n    }\n\n    setSortType(newSortType);\n\n    switch (newSortType) {\n      case SortType.ALL:\n        getGoods(getAll());\n        break;\n\n      case SortType.FIRST5:\n        getGoods(get5First());\n        break;\n\n      case SortType.RED:\n        getGoods(getRedGoods());\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App p-6\">\n      <h1 className=\"block title is-1\">Dynamic list of Goods</h1>\n\n      <div className=\"field is-grouped\">\n        {Object.values(SortType).filter(Boolean).map((currentSortType) => (\n          <button\n            className=\"button is-warning is-light mr-3\"\n            type=\"button\"\n            data-cy={currentSortType}\n            onClick={() => {\n              handleButtonClick(currentSortType);\n            }}\n          >\n            {buttonNames[currentSortType]}\n          </button>\n        ))}\n      </div>\n\n      {errorText\n        ? <p>{`Error! ${errorText}`}</p>\n        : <GoodsList goods={goods} />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}