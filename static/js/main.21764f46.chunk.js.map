{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","map","good","id","name","color","style","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","status","statusText","SortType","buttonNames","NONE","ALL","FIRST5","RED","App","useState","setGoods","sortType","setSortType","getGoods","promise","a","handleButtonClick","newSortType","sort","g1","g2","localeCompare","slice","filter","className","Object","values","Boolean","currentSortType","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"4PAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAC,GACT,IACEC,EAGED,EAHFC,GACAC,EAEEF,EAFFE,KACAC,EACEH,EADFG,MAGF,OACE,oBAEE,UAAQ,OACRC,MAAO,CAAED,SAHX,SAKGD,GAJID,SCbR,SAASI,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,GAMV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAM7CJ,EAASK,OALPC,QAAQC,OACb,IAAIC,MAAM,kCAPLF,QAAQC,OACb,IAAIC,MAAJ,UAAaR,EAASS,OAAtB,cAAkCT,EAASU,iBAc9C,I,ECjBFC,G,SAAAA,K,QAAAA,E,iBAAAA,E,2BAAAA,E,kBAAAA,M,KAOL,IAAMC,GAAW,mBACdD,EAASE,KAAO,IADF,cAEdF,EAASG,IAAM,kBAFD,cAGdH,EAASI,OAAS,sBAHJ,cAIdJ,EAASK,IAAM,kBAJD,GAOJC,EAAU,WACrB,MAA0BC,mBAAiB,IAA3C,mBAAO5B,EAAP,KAAc6B,EAAd,KACA,EAAgCD,mBAAmBP,EAASE,MAA5D,mBAAOO,EAAP,KAAiBC,EAAjB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,kEACfL,EADe,SACAI,EADA,6EAAH,sDAIRE,EAAoB,SAACC,GACzB,GAAIN,IAAaM,EAMjB,OAFAL,EAAYK,GAEJA,GACN,KAAKf,EAASG,IACZQ,EAASzB,KACT,MAEF,KAAKc,EAASI,OACZO,EDjBCzB,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZqC,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGlC,KAAKoC,cAAcD,EAAGnC,SAC1CqC,MAAM,EAAG,OCeR,MAEF,KAAKpB,EAASK,IACZM,EDdCzB,IACJE,MAAK,SAAAT,GAAK,OACTA,EAAM0C,QAAO,SAAAxC,GAAI,MAAmB,QAAfA,EAAKG,aCaxB,MAEF,QACE0B,EAAYV,EAASE,QAI3B,OACE,sBAAKoB,UAAU,MAAf,UACE,uDAECC,OAAOC,OAAOxB,GAAUqB,OAAOI,SAAS7C,KAAI,SAAC8C,GAAD,OAC3C,wBACEC,KAAK,SACL,UAASD,EACTE,QAAS,WACPd,EAAkBY,IAJtB,SAOGzB,EAAYyB,QAIjB,cAAC,EAAD,CAAW/C,MAAOA,QCnExBkD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.21764f46.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => {\n      const {\n        id,\n        name,\n        color,\n      } = good;\n\n      return (\n        <li\n          key={id}\n          data-cy=\"good\"\n          style={{ color }}\n        >\n          {name}\n        </li>\n      );\n    })}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(\n          new Error('Content type is not supported'),\n        );\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((g1, g2) => g1.name.localeCompare(g2.name))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => (\n      goods.filter(good => good.color === 'red')\n    ));\n};\n","import { FC, useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { Good } from './types/Good';\n\nimport { get5First, getAll, getRedGoods } from './api/goods';\n\nenum SortType {\n  NONE = '',\n  ALL = 'all-button',\n  FIRST5 = 'first-five-button',\n  RED = 'red-button',\n}\n\nconst buttonNames = {\n  [SortType.NONE]: '',\n  [SortType.ALL]: 'Load all goods',\n  [SortType.FIRST5]: 'Load 5 first goods',\n  [SortType.RED]: 'Load red goods',\n};\n\nexport const App: FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n\n  const getGoods = async (promise: Promise<Good[]>): Promise<void> => {\n    setGoods(await promise);\n  };\n\n  const handleButtonClick = (newSortType: SortType) => {\n    if (sortType === newSortType) {\n      return;\n    }\n\n    setSortType(newSortType);\n\n    switch (newSortType) {\n      case SortType.ALL:\n        getGoods(getAll());\n        break;\n\n      case SortType.FIRST5:\n        getGoods(get5First());\n        break;\n\n      case SortType.RED:\n        getGoods(getRedGoods());\n        break;\n\n      default:\n        setSortType(SortType.NONE);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      {Object.values(SortType).filter(Boolean).map((currentSortType) => (\n        <button\n          type=\"button\"\n          data-cy={currentSortType}\n          onClick={() => {\n            handleButtonClick(currentSortType);\n          }}\n        >\n          {buttonNames[currentSortType]}\n        </button>\n      ))}\n\n      <GoodsList goods={goods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}